(function () {

  'use strict';

  angular
    .module('jukebox')
    .controller('QueueController', function($scope, $rootScope, $interval, $routeParams, $cookies, $uibModal, backendAPI, sharedRoomData, screenSize) {

      $scope.pageClass = 'queue-page';
      var autoRefreshQueue = undefined;
      var QUEUE_REFRESH_RATE = 3000; // in ms

      $rootScope.responsiveVersion = screenSize.is('xs, sm') ? 'mobile' : 'desktop';
      // angular-match-media: updates the variable on window resize
      $scope.mobile = screenSize.on('xs, sm', function(match) {
          $scope.mobile = match;
          $rootScope.responsiveVersion = match ? 'mobile' : 'desktop';
      });

      $scope.room = sharedRoomData;
      sharedRoomData.roomId = $routeParams.roomId;
      $scope.roomId = sharedRoomData.roomId; //TODO(kyle): Remove this after plusButton.directive.js has been updated by justin

      // TODO: move this elsewhere
      var POTENTIAL_USERNAMES = ['BlueTrout', 'YellowDuck', 'RedHerring', 'BoredMoose', 'SillyWhale', 'OrangeEagle', 'VelvetMouse', 'GreenMonkey', 'VioletLobster', 'ConfusedTucan', 'WileySloth'];

      sharedRoomData.userId = $cookies.get('jb_user_id'); // TODO: think about moving this to sharedRoomData factory initialization
      sharedRoomData.userName = $cookies.get('jb_user_name');
      sharedRoomData.password = $cookies.get(sharedRoomData.roomId) ? $cookies.get(sharedRoomData.roomId) : '';

      if (!sharedRoomData.userId || !sharedRoomData.userName) {
        var autoGeneratedUsername = POTENTIAL_USERNAMES[Math.floor(Math.random()*POTENTIAL_USERNAMES.length)];
        promptForUsername(autoGeneratedUsername);
      } else {
        console.log("You already have a username! It is " + sharedRoomData.userName);
        joinRoom(); // join room if you haven't already
      }

      function promptForUsername(placeholder) {
        var modalInstance = $uibModal.open({
          templateUrl: 'common/ui-elements/defaultModal.html',
          controller: ['$scope', '$sce', '$uibModalInstance', 'sharedRoomData', function($scope, $sce, $uibModalInstance, sharedRoomData) {
            //$scope.aliasInput = placeholder;
            $scope.modal_title = 'Enter Your Alias';
            $scope.modal_body_html = $sce.trustAsHtml('<span>@</span><input type="text" ng-model="aliasInput" class="form-control" autofocus required />');
            $scope.primary_btn_text = 'CONTINUE';
            $scope.ok = function() {
              if (!$scope.aliasInput || /[^a-zA-Z0-9]/.test($scope.aliasInput)) return; // check if alphanumeric
              $uibModalInstance.close();
              sharedRoomData.userName = $scope.aliasInput;
              createUser(sharedRoomData.userName);
            };
          }],
          backdrop: 'static',
          windowClass: 'default',
          keyboard: false // prevent closing the modal with the escape key
        });
      }

      function createUser(name) {
        backendAPI.registerUser({
          username: name,
        }).success(function(data) {
          if (data.status === 'OK') {
            sharedRoomData.userId = data.data;
            $cookies.put('jb_user_name', sharedRoomData.userName);
            $cookies.put('jb_user_id', sharedRoomData.userId);
            joinRoom();
            console.log('OK backendAPI.registerUser', data);
          } else {
            console.log('NOT OK backendAPI.registerUser', data);
          }
        }).error(function(error) {
          console.log('ERROR backendAPI.registerUser', error);
        });
      }

      // TODO: All of these should probably be moved to a separate service...
      function joinRoom() {
        backendAPI.joinRoom({
          room_id: sharedRoomData.roomId,
          user_id: sharedRoomData.userId,
          password: sharedRoomData.password,
        }).success(function(data) {
          if (data.status === 'OK') {
            console.log('OK backendAPI.joinRoom', data);
            getSongQueue();
          } else {
            if (data.message === "The correct password was not provided.") { // TODO: reuse this code below?
              sharedRoomData.passwordProtected = true;
              sharedRoomData.password = window.prompt("Enter the password:");
              $cookies.put(sharedRoomData.roomId, sharedRoomData.password);
              joinRoom();
            }
            console.log('NOT OK backendAPI.joinRoom', data);
          }
        }).error(function(error) {
          console.log('ERROR backendAPI.joinRoom', error);
        });
      }

      function getSongQueue() {
        backendAPI.getSongQueue({
          room_id: sharedRoomData.roomId,
          password: sharedRoomData.password,
        }).success(function(data) {
          if (data.status === 'OK') {
            console.log('OK backendAPI.getSongQueue', data);
            sharedRoomData.roomName = data.room_name;
            sharedRoomData.queue = data.data;
            sharedRoomData.allAdmin = data.all_admin == '1' ? true : false;
            // start interval if it hasn't been started already
            if (!autoRefreshQueue) {
              autoRefreshQueue = $interval(function() {
                getSongQueue();
              }, QUEUE_REFRESH_RATE);
            }
            //console.log('OK backendAPI.getSongQueue', data);
          } else {
            if (data.message === "The correct password was not provided.") {
              sharedRoomData.passwordProtected = true;
              sharedRoomData.password = window.prompt("Enter the password:");
              $cookies.put(sharedRoomData.roomId, sharedRoomData.password);
              getSongQueue();
            }
            console.log('NOT OK backendAPI.getSongQueue', data);
          }
        }).error(function(error) {
          console.log('ERROR backendAPI.getSongQueue', error);
        });
      }

      function changeSongPosition(songId, newPos) {
        backendAPI.reorderSong({
          room_id: sharedRoomData.roomId,
          user_id: sharedRoomData.userId,
          password: sharedRoomData.password,
          song_id: songId,
          new_pos: newPos,
        }).success(function(data) {
          if (data.status === 'OK') {
            console.log('OK backendAPI.reorderSong', data);
            getSongQueue();
          } else {
            console.log('NOT OK backendAPI.reorderSong', data);
          }
        }).error(function(data) {
          console.log('ERROR backendAPI.reorderSong', error);
        });
      }

      function deleteSong(songId) {
        backendAPI.deleteSong({
          room_id: sharedRoomData.roomId,
          user_id: sharedRoomData.userId,
          password: sharedRoomData.password,
          song_id: songId,
        }).success(function(data) {
          if (data.status === 'OK') {
            console.log('OK backendAPI.deleteSong', data);
            getSongQueue();
          } else {
            console.log('NOT OK backendAPI.deleteSong', data);
          }
        }).error(function(data) {
          console.log('ERROR backendAPI.deleteSong', error);
        });
      }

      // TODO: only allow if admin
      $scope.dragControlListeners = {
        accept: function (sourceItemHandleScope, destSortableScope) {
          return true; //override to determine drag is allowed or not. default is true.
        },
        itemMoved: function (event) {},
        orderChanged: function(event) {
          var songId = event.source.itemScope.element[0].dataset.uuid;
          var newPos = event.dest.index;
          changeSongPosition(songId, newPos);
        },
        //containment: '#board', //optional param.
        //clone: true, //optional param for clone feature.
        //allowDuplicates: false, //optional param allows duplicates to be dropped.
      };

      // $scope.dragControlListeners1 = {
      //   //containment: '#board', //optional param.
      //   allowDuplicates: true, //optional param allows duplicates to be dropped.
      // };

      $scope.deleteSong = function($event) {
        var songId = $event.target.parentElement.dataset.uuid; // another, slower, way: angular.element($event.target).parent()
        deleteSong(songId);
      }

  });

})();